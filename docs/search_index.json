[
["index.html", "http testing book Chapter 1 http testing book 1.1 Info 1.2 Citing the packages 1.3 Installation", " http testing book built on 2018-04-27 - for vcr v0.0.8.9310 Chapter 1 http testing book write some stuff … 1.1 Info Code: https://github.com/ropensci/http-testing-book/ Issues/Bug reports: https://github.com/ropensci/http-testing-book/issues Packages crul: https://cran.rstudio.com/web/packages/crul/ webmockr: https://cran.rstudio.com/web/packages/webmockr/ vcr: https://github.com/ropensci/vcr/ 1.2 Citing the packages xxxx 1.3 Installation Stable version from CRAN install.packages(c(&quot;crul&quot;, &quot;webmockr&quot;)) remotes::install_github(&quot;ropensci/vcr&quot;) "],
["intro.html", "Chapter 2 Introduction 2.1 User interface", " Chapter 2 Introduction 2.1 User interface write some stuff. adfafds asdfadf "],
["vcr-configuration.html", "Chapter 3 vcr configuration 3.1 Get your configuration 3.2 Set configuration variables 3.3 Re-set to defaults 3.4 dir - directory of where cassettes are stored 3.5 record - record mode 3.6 match_requests_on - customize how vcr matches requests 3.7 allow_unused_http_interactions - Allow HTTP connections when no cassette 3.8 serialize_with - which serializer to use 3.9 persist_with - which persister to use 3.10 ignore requests 3.11 uri_parser - which uri parser to use 3.12 preserve_exact_body_bytes 3.13 allow_http_connections_when_no_cassette", " Chapter 3 vcr configuration vcr configuration library(&quot;vcr&quot;) 3.1 Get your configuration Use vcr_configuration() to get the current configuration vcr_configuration() You can get the default configuration variables via vcr_config_defaults() vcr_config_defaults() These defaults are set when you load vcr - you can override any of them as described below. 3.2 Set configuration variables Use vcr_configure() to set configuration variables. For example, set a single variable: vcr_configure( dir = &quot;foobar/vcr_cassettes&quot; ) Or many at once: vcr_configure( dir = &quot;foobar/vcr_cassettes&quot;, record = &quot;all&quot; ) 3.3 Re-set to defaults vcr_configure_reset() 3.4 dir - directory of where cassettes are stored vcr_configure(dir = &quot;new/path&quot;) 3.5 record - record mode One of: ‘all’, ‘none’, ‘new_episodes’, ‘once’. See ?recording for info on the options vcr_configure(record = &quot;new_episodes&quot;) 3.6 match_requests_on - customize how vcr matches requests vcr_configure(match_requests_on = c(&#39;query&#39;, &#39;headers&#39;)) 3.7 allow_unused_http_interactions - Allow HTTP connections when no cassette Default is TRUE, and thus does not error when http interactions are unused. You can set to FALSE in which case vcr errors when a cassette is ejected and not all http interactions have been used. vcr_configure(allow_unused_http_interactions = FALSE) 3.8 serialize_with - which serializer to use Right now only option is “yaml” vcr_configure(serialize_with = &quot;yaml&quot;) 3.9 persist_with - which persister to use Right now only option is “FileSystem” vcr_configure(persist_with = &quot;FileSystem&quot;) 3.10 ignore requests 3.10.1 ignore_hosts - specify particular hosts to ignore vcr_configure(ignore_hosts = &quot;google.com&quot;) 3.10.2 ignore_localhost - ignore all localhost flavors vcr_configure(ignore_localhost = TRUE) 3.10.3 ignore_request - ignore any request for which function is true vcr_configure(ignore_request = function(x) x == 5) 3.11 uri_parser - which uri parser to use By default we use httr::parse_url, but you can use a different one. Remember to pass in the function quoted, and namespaced. vcr_configure(uri_parser = &quot;urltools::url_parse&quot;) 3.12 preserve_exact_body_bytes Some HTTP servers are not well-behaved and respond with invalid data. Set preserve_exact_body_bytes to TRUE to base64 encode the result body in order to preserve the bytes exactly as-is. vcr does not do this by default, since base64-encoding the string removes the human readibility of the cassette. vcr_configure(preserve_exact_body_bytes = TRUE) 3.13 allow_http_connections_when_no_cassette Determines how vcr treats HTTP requests that are made when no vcr cassette is in use. When TRUE, requests made when there is no vcr cassette in use will be allowed. When FALSE (default), an [UnhandledHTTPRequestError] error will be raised for any HTTP request made when there is no cassette in use vcr_configure(allow_http_connections_when_no_cassette = TRUE) "],
["record-modes.html", "Chapter 4 record modes 4.1 once 4.2 none 4.3 new_episodes 4.4 all", " Chapter 4 record modes 4.1 once The once record mode will: Replay previously recorded interactions. Record new interactions if there is no cassette file. Cause an error to be raised for new requests if there is a cassette file. It is similar to the new_episodes record mode, but will prevent new, unexpected requests from being made (i.e. because the request URI changed or whatever). once is the default record mode, used when you do not set one. 4.2 none The none record mode will: Replay previously recorded interactions. Cause an error to be raised for any new requests. This is useful when your code makes potentially dangerous HTTP requests. The none record mode guarantees that no new HTTP requests will be made. 4.3 new_episodes The new_episodes record mode will: Record new interactions. Replay previously recorded interactions. It is similar to the once record mode, but will always record new interactions, even if you have an existing recorded one that is similar (but not identical, based on the match_request_on option). 4.4 all The all record mode will: Record new interactions. Never replay previously recorded interactions. This can be temporarily used to force VCR to re-record a cassette (i.e. to ensure the responses are not out of date) or can be used when you simply want to log all HTTP requests. "],
["request-matching.html", "Chapter 5 request matching 5.1 matching on method 5.2 matching on uri 5.3 matching on host 5.4 matching on path 5.5 matching on query string 5.6 matching on body 5.7 matching on headers 5.8 Playback repeats", " Chapter 5 request matching There are a number of options, some of which are on by default, some of which can be used together, and some alone. 5.1 matching on method Use the method request matcher to match requests on the HTTP method (i.e. GET, POST, PUT, DELETE, etc). You will generally want to use this matcher. The method matcher is used (along with the uri matcher) by default if you do not specify how requests should match. 5.2 matching on uri Use the uri request matcher to match requests on the request URI. The uri matcher is used (along with the method matcher) by default if you do not specify how requests should match. 5.3 matching on host Use the host request matcher to match requests on the request host. You can use this (alone, or in combination with path) as an alternative to uri so that non-deterministic portions of the URI are not considered as part of the request matching. 5.4 matching on path Use the path request matcher to match requests on the path portion of the request URI. You can use this (alone, or in combination with host) as an alternative to uri so that non-deterministic portions of the URI 5.5 matching on query string Use the query request matcher to match requests on the query string portion of the request URI. You can use this (alone, or in combination with others) as an alternative to uri so that non-deterministic portions of the URI are not considered as part of the request matching. 5.6 matching on body Use the body request matcher to match requests on the request body. 5.7 matching on headers Use the headers request matcher to match requests on the request headers. 5.8 Playback repeats still in progress … "],
["logging.html", "Chapter 6 logging 6.1 Setup logging 6.2 The log file", " Chapter 6 logging Use logging to set an IO-like object that vcr will log output to. This is a useful way to troubleshoot what vcr is doing. 6.1 Setup logging To set up logging, see ?vcr_logging use vcr_configure() vcr::vcr_configure( log = TRUE, log_opts = list(file = &quot;vcr.log&quot;, log_prefix = &quot;Cassette&quot;, date = TRUE) ) The log parameter is a boolean to indicate whether vcr should log or not The log_opts parameter is a named list with various options: file: the log file path (it does not get put in the cassette directory, but is at whatever this path is) log_prefix: prefix to put in each log entry. the default is Cassette date: whether to include a time stamp in each log entry or not. format is YYYY-MM-DD HH:MM:SS 6.2 The log file The following is an example log file: [Cassette: &#39;foobar&#39;] - 2018-04-27 08:36:28 - Init. HTTPInteractionList w/ request matchers [method, uri] &amp; 1 interaction(s): { get http://www.marinespecies.org/rest/AphiaChildrenByAphiaID/105706?marine_only=true&amp;offset=1 =&gt; ??? [{&quot;AphiaID&quot;:297110,&quot;url&quot;:&quot;http:\\/\\/www.marinespecies.org\\/aphia.php?p=taxdetails } [Cassette: &#39;foobar&#39;] - 2018-04-27 08:36:28 - Initialized with options: {name: foobar, record: once, serialize_with: yaml, persist_with: FileSystem, match_requests_on: c(&quot;method&quot;, &quot;uri&quot;), update_content_length_header: FALSE, allow_playback_repeats: FALSE, preserve_exact_body_bytes: FALSE} [Cassette: &#39;foobar&#39;] - 2018-04-27 08:36:28 - Handling request: get http://www.marinespecies.org/rest/AphiaChildrenByAphiaID/105706?marine_only=true&amp;offset=1 (disabled: FALSE) [Cassette: &#39;foobar&#39;] - 2018-04-27 08:36:28 - Checking if {get http://www.marinespecies.org/rest/AphiaChildrenByAphiaID/105706?marine_only=true&amp;offset=1} matches {get http://www.marinespecies.org/rest/AphiaChildrenByAphiaID/105706?marine_only=true&amp;offset=1} using matchers: [method, uri] [Cassette: &#39;foobar&#39;] - 2018-04-27 08:36:28 - method matched: current request [get http://www.marinespecies.org/rest/AphiaChildrenByAphiaID/105706?marine_only=true&amp;offset=1] vs [get http://www.marinespecies.org/rest/AphiaChildrenByAphiaID/105706?marine_only=true&amp;offset=1] [Cassette: &#39;foobar&#39;] - 2018-04-27 08:36:28 - uri matched: current request [get http://www.marinespecies.org/rest/AphiaChildrenByAphiaID/105706?marine_only=true&amp;offset=1] vs [get http://www.marinespecies.org/rest/AphiaChildrenByAphiaID/105706?marine_only=true&amp;offset=1] [Cassette: &#39;foobar&#39;] - 2018-04-27 08:36:28 - Identified request type: (stubbed_by_vcr) for get http://www.marinespecies.org/rest/AphiaChildrenByAphiaID/105706?marine_only=true&amp;offset=1 [Cassette: &#39;foobar&#39;] - 2018-04-27 08:36:28 - Checking if {get http://www.marinespecies.org/rest/AphiaChildrenByAphiaID/105706?marine_only=true&amp;offset=1} matches {get http://www.marinespecies.org/rest/AphiaChildrenByAphiaID/105706?marine_only=true&amp;offset=1} using matchers: [method, uri] [Cassette: &#39;foobar&#39;] - 2018-04-27 08:36:28 - method matched: current request [get http://www.marinespecies.org/rest/AphiaChildrenByAphiaID/105706?marine_only=true&amp;offset=1] vs [get http://www.marinespecies.org/rest/AphiaChildrenByAphiaID/105706?marine_only=true&amp;offset=1] [Cassette: &#39;foobar&#39;] - 2018-04-27 08:36:28 - uri matched: current request [get http://www.marinespecies.org/rest/AphiaChildrenByAphiaID/105706?marine_only=true&amp;offset=1] vs [get http://www.marinespecies.org/rest/AphiaChildrenByAphiaID/105706?marine_only=true&amp;offset=1] [Cassette: &#39;foobar&#39;] - 2018-04-27 08:36:28 - Found matching interaction for get http://www.marinespecies.org/rest/AphiaChildrenByAphiaID/105706?marine_only=true&amp;offset=1 at index 1: ??? [{&quot;AphiaID&quot;:297110,&quot;url&quot;:&quot;http:\\/\\/www.marinespecies.org\\/aphia.php?p=taxdetails Internally vcr logs certain actions that we think are important steps in the process, including: initializing an HTTPInteractionList object that holds HTTP interactions initializing a Cassette with whatever options the user passes in declaring what request is being handled what request is being checked whether there is a match found or not when an interaction is recorded, or pulled from a stub, etc. If you turn off the date, you won’t get date entries: vcr::vcr_configure( log = TRUE, log_opts = list(file = &quot;vcr.log&quot;, log_prefix = &quot;Cassette&quot;, date = FALSE) ) [Cassette: &#39;foobar&#39;] - {{message}} And you can change the prefix from Cassette to something else: vcr::vcr_configure( log = TRUE, log_opts = list(file = &quot;vcr.log&quot;, log_prefix = &quot;Unicorn&quot;, date = FALSE) ) [Unicorn: &#39;foobar&#39;] - {{message}} "],
["security.html", "Chapter 7 security 7.1 API keys and such 7.2 Other security", " Chapter 7 security 7.1 API keys and such The configuration parameter filter_sensitive_data accepts a named list. Each element in the list should be of the following format: thing_to_replace_it_with = thing_to_replace We replace all instances of thing_to_replace with thing_to_replace_it_with. Before recording (writing to a cassette) we do the replacement and then when reading from the cassette we do the reverse replacement to get back to the real data. The before record replacement happens in an internal function write_interactions(), while before playback replacement happens in internal function YAML$deserialize_path() vcr_configure( filter_sensitive_data = list(&quot;&lt;&lt;&lt;my_api_key&gt;&gt;&gt;&quot; = Sys.getenv(&#39;API_KEY&#39;)) ) You want to make the string that replaces your sensitive string something that won’t be easily found elsewhere in the response body/headers/etc. It’s a good idea to not in place of thing_to_replace put your actual sensitive key thing, because that defeats the purpose of trying to protect your private data. This is why we highly recommend setting your API keys as environment variables, then you can as seen above just put a call to Sys.getenv(), which we’ll use internally to get your key, find it anywhere in the HTTP responses, and replace it with your placeholder string. The reason you want to do this is because you may on purpose or on accident push your cassettes to the public web, and when that happens you don’t want your private keys in those cassettes. Note that the way this is implemented in vcr is not super elegant and is not general with respect to the serializer. We only support YAML serializing right now, but when we support other serializers we’ll need to change the implementation. 7.2 Other security Let us know about any other security concerns! Surely there’s things we haven’t considered yet. "],
["escape-hatches.html", "Chapter 8 escape hatches 8.1 lightswitch: vcr, webmockr and their on/off states 8.2 turned_off 8.3 turn_off", " Chapter 8 escape hatches There’s many different scenarios for using vcr, some of which are that you have vcr loaded but you want to still make real HTTP requests. The following are different ways to allow real HTTP requests. 8.1 lightswitch: vcr, webmockr and their on/off states After loading vcr, webmockr is not loaded, thus real HTTP requests are allowed. library(vcr) After loading webmockr you can still make real HTTP requests. library(webmockr) But after turning mocking on you can’t make real requests crul::mock() # OR webmockr::enable() And you’ll get errors that come from webmockr when attempting real HTTP requests HttpClient$new(url = &quot;https://httpbin.org/get&quot;)$get() #&gt; Error: Real HTTP connections are disabled. #&gt; Unregistered request: GET https://httpbin.org/get with headers {Accept-Encoding: gzip, deflate} #&gt; #&gt; You can stub this request with the following snippet: #&gt; #&gt; stub_request(&#39;get&#39;, uri = &#39;https://httpbin.org/get&#39;) %&gt;% #&gt; wi_th(headers = list(&#39;Accept-Encoding&#39; = &#39;gzip, deflate&#39;)) You can have vcr loaded but if you’re not using use_casette 8.2 turned_off turned_off() lets you temporarily make a real HTTP request without completely turning vcr off, unloading it, etc. What happens internally is we turn off vcr, run your code block, then on exit turn vcr back on - such that vcr is onl turned off for the duration of your code block running. Even if your code block errors, vcr will be turned back on due to use of on.exit(turn_on()) library(vcr) library(crul) turned_off({ res &lt;- HttpClient$new(url = &quot;https://httpbin.org/get&quot;)$get() }) res #&gt; &lt;crul response&gt; #&gt; url: https://httpbin.org/get #&gt; request_headers: #&gt; User-Agent: libcurl/7.54.0 r-curl/3.2 crul/0.5.2 #&gt; Accept-Encoding: gzip, deflate #&gt; Accept: application/json, text/xml, application/xml, */* #&gt; response_headers: #&gt; status: HTTP/1.1 200 OK #&gt; server: nginx #&gt; date: Fri, 27 Apr 2018 23:22:44 GMT #&gt; content-type: application/json #&gt; content-length: 330 #&gt; connection: keep-alive #&gt; access-control-allow-origin: * #&gt; access-control-allow-credentials: true #&gt; x-powered-by: Flask #&gt; x-processed-time: 0 #&gt; status: 200 8.3 turn_off "]
]
