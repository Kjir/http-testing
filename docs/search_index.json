[
["index.html", "http testing book Chapter 1 http testing book 1.1 Info 1.2 Citing the packages 1.3 Installation", " http testing book built on 2018-04-23 - for vcr v0.0.7.9325 Chapter 1 http testing book write some stuff … 1.1 Info Code: https://github.com/ropensci/http-testing-book/ Issues/Bug reports: https://github.com/ropensci/http-testing-book/issues Packages crul: https://cran.rstudio.com/web/packages/crul/ webmockr: https://cran.rstudio.com/web/packages/webmockr/ vcr: https://github.com/ropensci/vcr/ 1.2 Citing the packages xxxx 1.3 Installation Stable version from CRAN install.packages(c(&quot;crul&quot;, &quot;webmockr&quot;)) remotes::install_github(&quot;ropensci/vcr&quot;) "],
["intro.html", "Chapter 2 Introduction 2.1 User interface", " Chapter 2 Introduction 2.1 User interface write some stuff. adfafds asdfadf "],
["vcr-configuration.html", "Chapter 3 vcr configuration 3.1 Get configuration 3.2 Set configuration variables 3.3 Re-set to defaults 3.4 dir - directory of where cassettes are stored 3.5 record - record mode 3.6 match_requests_on - customize how vcr matches requests 3.7 allow_unused_http_interactions - Allow HTTP connections when no cassette 3.8 serialize_with - which serializer to use 3.9 persist_with - which persister to use 3.10 ignore requests 3.11 uri_parser - which uri parser to use 3.12 preserve_exact_body_bytes", " Chapter 3 vcr configuration vcr configuration library(&quot;vcr&quot;) 3.1 Get configuration Use vcr_configuration() to get the current configuration vcr_configuration() #&gt; &lt;vcr configuration&gt; #&gt; Cassette Dir: . #&gt; Record: once #&gt; URI Parser: crul::url_parse #&gt; Match Requests on: method, uri #&gt; Preserve Bytes?: TRUE #&gt; Logging?: FALSE You can get the default configuration variables via vcr_config_defaults() vcr_config_defaults() #&gt; $dir #&gt; [1] &quot;.&quot; #&gt; #&gt; $record #&gt; [1] &quot;once&quot; #&gt; #&gt; $match_requests_on #&gt; [1] &quot;method&quot; &quot;uri&quot; #&gt; #&gt; $allow_unused_http_interactions #&gt; [1] TRUE #&gt; #&gt; $serialize_with #&gt; [1] &quot;yaml&quot; #&gt; #&gt; $persist_with #&gt; [1] &quot;FileSystem&quot; #&gt; #&gt; $ignore_hosts #&gt; NULL #&gt; #&gt; $ignore_localhost #&gt; [1] FALSE #&gt; #&gt; $ignore_request #&gt; NULL #&gt; #&gt; $uri_parser #&gt; [1] &quot;crul::url_parse&quot; #&gt; #&gt; $preserve_exact_body_bytes #&gt; [1] FALSE #&gt; #&gt; $turned_off #&gt; [1] FALSE #&gt; #&gt; $ignore_cassettes #&gt; [1] FALSE #&gt; #&gt; $re_record_interval #&gt; NULL #&gt; #&gt; $clean_outdated_http_interactions #&gt; NULL #&gt; #&gt; $allow_http_connections_when_no_cassette #&gt; [1] FALSE #&gt; #&gt; $cassettes #&gt; list() #&gt; #&gt; $linked_context #&gt; NULL #&gt; #&gt; $log #&gt; [1] FALSE #&gt; #&gt; $log_opts #&gt; $log_opts$file #&gt; [1] &quot;vcr.log&quot; #&gt; #&gt; $log_opts$log_prefix #&gt; [1] &quot;Cassette&quot; These defaults are set when you load vcr - you can override any of them as described below. 3.2 Set configuration variables Use vcr_configure() to set configuration variables. For example, set a single variable: vcr_configure( dir = &quot;foobar/vcr_cassettes&quot; ) #&gt; &lt;vcr configuration&gt; #&gt; Cassette Dir: foobar/vcr_cassettes #&gt; Record: once #&gt; URI Parser: crul::url_parse #&gt; Match Requests on: method, uri #&gt; Preserve Bytes?: FALSE #&gt; Logging?: FALSE Or many at once: vcr_configure( dir = &quot;foobar/vcr_cassettes&quot;, record = &quot;all&quot; ) #&gt; &lt;vcr configuration&gt; #&gt; Cassette Dir: foobar/vcr_cassettes #&gt; Record: all #&gt; URI Parser: crul::url_parse #&gt; Match Requests on: method, uri #&gt; Preserve Bytes?: FALSE #&gt; Logging?: FALSE 3.3 Re-set to defaults vcr_configure_reset() #&gt; &lt;vcr configuration&gt; #&gt; Cassette Dir: . #&gt; Record: once #&gt; URI Parser: crul::url_parse #&gt; Match Requests on: method, uri #&gt; Preserve Bytes?: FALSE #&gt; Logging?: FALSE 3.4 dir - directory of where cassettes are stored vcr_configure(dir = &quot;new/path&quot;) #&gt; &lt;vcr configuration&gt; #&gt; Cassette Dir: new/path #&gt; Record: once #&gt; URI Parser: crul::url_parse #&gt; Match Requests on: method, uri #&gt; Preserve Bytes?: FALSE #&gt; Logging?: FALSE 3.5 record - record mode One of: ‘all’, ‘none’, ‘new_episodes’, ‘once’. See ?recording for info on the options vcr_configure(record = &quot;new_episodes&quot;) #&gt; &lt;vcr configuration&gt; #&gt; Cassette Dir: . #&gt; Record: new_episodes #&gt; URI Parser: crul::url_parse #&gt; Match Requests on: method, uri #&gt; Preserve Bytes?: FALSE #&gt; Logging?: FALSE 3.6 match_requests_on - customize how vcr matches requests vcr_configure(match_requests_on = c(&#39;query&#39;, &#39;headers&#39;)) #&gt; &lt;vcr configuration&gt; #&gt; Cassette Dir: . #&gt; Record: once #&gt; URI Parser: crul::url_parse #&gt; Match Requests on: query, headers #&gt; Preserve Bytes?: FALSE #&gt; Logging?: FALSE 3.7 allow_unused_http_interactions - Allow HTTP connections when no cassette Default is TRUE, and thus does not error when http interactions are unused. You can set to FALSE in which case vcr errors when a cassette is ejected and not all http interactions have been used. vcr_configure(allow_unused_http_interactions = FALSE) #&gt; &lt;vcr configuration&gt; #&gt; Cassette Dir: . #&gt; Record: once #&gt; URI Parser: crul::url_parse #&gt; Match Requests on: method, uri #&gt; Preserve Bytes?: FALSE #&gt; Logging?: FALSE 3.8 serialize_with - which serializer to use Right now only option is “yaml” vcr_configure(serialize_with = &quot;yaml&quot;) #&gt; &lt;vcr configuration&gt; #&gt; Cassette Dir: . #&gt; Record: once #&gt; URI Parser: crul::url_parse #&gt; Match Requests on: method, uri #&gt; Preserve Bytes?: FALSE #&gt; Logging?: FALSE 3.9 persist_with - which persister to use Right now only option is “FileSystem” vcr_configure(persist_with = &quot;FileSystem&quot;) #&gt; &lt;vcr configuration&gt; #&gt; Cassette Dir: . #&gt; Record: once #&gt; URI Parser: crul::url_parse #&gt; Match Requests on: method, uri #&gt; Preserve Bytes?: FALSE #&gt; Logging?: FALSE 3.10 ignore requests 3.10.1 ignore_hosts - specify particular hosts to ignore vcr_configure(ignore_hosts = &quot;google.com&quot;) #&gt; &lt;vcr configuration&gt; #&gt; Cassette Dir: . #&gt; Record: once #&gt; URI Parser: crul::url_parse #&gt; Match Requests on: method, uri #&gt; Preserve Bytes?: FALSE #&gt; Logging?: FALSE 3.10.2 ignore_localhost - ignore all localhost flavors vcr_configure(ignore_localhost = TRUE) #&gt; &lt;vcr configuration&gt; #&gt; Cassette Dir: . #&gt; Record: once #&gt; URI Parser: crul::url_parse #&gt; Match Requests on: method, uri #&gt; Preserve Bytes?: FALSE #&gt; Logging?: FALSE 3.10.3 ignore_request - ignore any request for which function is true vcr_configure(ignore_request = function(x) x == 5) #&gt; &lt;vcr configuration&gt; #&gt; Cassette Dir: . #&gt; Record: once #&gt; URI Parser: crul::url_parse #&gt; Match Requests on: method, uri #&gt; Preserve Bytes?: FALSE #&gt; Logging?: FALSE 3.11 uri_parser - which uri parser to use By default we use httr::parse_url, but you can use a different one. Remember to pass in the function quoted, and namespaced. vcr_configure(uri_parser = &quot;urltools::url_parse&quot;) #&gt; &lt;vcr configuration&gt; #&gt; Cassette Dir: . #&gt; Record: once #&gt; URI Parser: urltools::url_parse #&gt; Match Requests on: method, uri #&gt; Preserve Bytes?: FALSE #&gt; Logging?: FALSE 3.12 preserve_exact_body_bytes Some HTTP servers are not well-behaved and respond with invalid data. Set preserve_exact_body_bytes to TRUE to base64 encode the result body in order to preserve the bytes exactly as-is. vcr does not do this by default, since base64-encoding the string removes the human readibility of the cassette. vcr_configure(preserve_exact_body_bytes = TRUE) #&gt; &lt;vcr configuration&gt; #&gt; Cassette Dir: . #&gt; Record: once #&gt; URI Parser: crul::url_parse #&gt; Match Requests on: method, uri #&gt; Preserve Bytes?: TRUE #&gt; Logging?: FALSE "],
["record-modes.html", "Chapter 4 record modes 4.1 once 4.2 none 4.3 new_episodes 4.4 all", " Chapter 4 record modes 4.1 once The once record mode will: Replay previously recorded interactions. Record new interactions if there is no cassette file. Cause an error to be raised for new requests if there is a cassette file. It is similar to the new_episodes record mode, but will prevent new, unexpected requests from being made (i.e. because the request URI changed or whatever). once is the default record mode, used when you do not set one. 4.2 none The none record mode will: Replay previously recorded interactions. Cause an error to be raised for any new requests. This is useful when your code makes potentially dangerous HTTP requests. The none record mode guarantees that no new HTTP requests will be made. 4.3 new_episodes The new_episodes record mode will: Record new interactions. Replay previously recorded interactions. It is similar to the once record mode, but will always record new interactions, even if you have an existing recorded one that is similar (but not identical, based on the match_request_on option). 4.4 all The all record mode will: Record new interactions. Never replay previously recorded interactions. This can be temporarily used to force VCR to re-record a cassette (i.e. to ensure the responses are not out of date) or can be used when you simply want to log all HTTP requests. "],
["request-matching.html", "Chapter 5 request matching 5.1 matching on method 5.2 matching on uri 5.3 matching on host 5.4 matching on path 5.5 matching on query string 5.6 matching on body 5.7 matching on headers", " Chapter 5 request matching There are a number of options, some of which are on by default, some of which can be used together, and some alone. 5.1 matching on method Use the method request matcher to match requests on the HTTP method (i.e. GET, POST, PUT, DELETE, etc). You will generally want to use this matcher. The method matcher is used (along with the uri matcher) by default if you do not specify how requests should match. 5.2 matching on uri Use the uri request matcher to match requests on the request URI. The uri matcher is used (along with the method matcher) by default if you do not specify how requests should match. 5.3 matching on host Use the host request matcher to match requests on the request host. You can use this (alone, or in combination with path) as an alternative to uri so that non-deterministic portions of the URI are not considered as part of the request matching. 5.4 matching on path Use the path request matcher to match requests on the path portion of the request URI. You can use this (alone, or in combination with host) as an alternative to uri so that non-deterministic portions of the URI 5.5 matching on query string Use the query request matcher to match requests on the query string portion of the request URI. You can use this (alone, or in combination with others) as an alternative to uri so that non-deterministic portions of the URI are not considered as part of the request matching. 5.6 matching on body Use the body request matcher to match requests on the request body. 5.7 matching on headers Use the headers request matcher to match requests on the request headers. "],
["logging.html", "Chapter 6 logging", " Chapter 6 logging Use logging to set an IO-like object that vcr will log output to. This is a useful way to troubleshoot what vcr is doing. asdfasdfadsa "]
]
